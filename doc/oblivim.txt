*oblivim.txt* Functionality for OBScript and CSE ScriptSync support

		   ____  __    ___     _    ___         
		  / __ \/ /_  / (_)   | |  / (_)___ ___ 
		 / / / / __ \/ / /____| | / / / __ `__ \
		/ /_/ / /_/ / / /_____/ |/ / / / / / / /
		\____/_.___/_/_/      |___/_/_/ /_/ /_/ 

Essential OBScript support including syntax highlighting, indentation, and
ScriptSync supported features for advanced work.

==============================================================================
CONTENTS                                                    *oblivim-contents*

	1. Introduction..........................|oblivim-intro|
	2. Usage.................................|oblivim-usage|
	  2a. ScriptSync Support............|oblivim-scriptsync|
	  2b. Core Features..............|oblivim-core-features|
	3. Options.............................|oblivim-options|

==============================================================================
Section 1: Introduction                                        *oblivim-intro*

OBScript is an internal scripting language for end mod developers for the game
Oblivion. It is a relatively simple language, and the vanilla function and
feature set is laughable for any modern game oriented language like Bethesda's
Papyrus or Unity's C# based language. OBSE, the Oblivion Script Extender, does
exactly that and provides a whole new host of features for mod developers. The
list of new features is broad. This increases the complexity in mods, and the
Oblivion development tool, the Construction Set, is unfit for this new
complexity.

The Construction Set Extender, by shademe and others, brings a whole host of
new features, and the most important one is a true IDE for OBScript. It allows
genuine script development, and with the latest release it also allows for
external editors to be used semi-seamlessly. This plugin aims to not only
integrate itself with this external editor support but to also replicate as
many IDE features that are provided.

==============================================================================
Section 2: Usage                                               *oblivim-usage*

Standard syntax highlighting and indentation is provided for OBScript files.
The filetype is `obse` and works for `*.obl` text files by default. Basic
`*.esm` and `*.esp` file browsing is also supported for viewing. Manipulation
with these files is not supported.

This plugin can be used without any Construction Set Extender ScriptSync
support. By default this support is expected, but |g:ov_disable_cse| can be
set to `1` if this support is not desired.

------------------------------------------------------------------------------
Section 2a: ScriptSync Support                            *oblivim-scriptsync*

ScriptSync is a feature of Construction Set Extender that allows for external
text editor support with the IDE features provided by CSE. The support is
simple, through a log file that's generated by CSE, but does allow for more
advanced features that are desirable for more advanced development.

This plugin was designed around a base idea of how the ScriptSync functions.
The following values must be set in your "Construction Set Extender.ini" file:

  `[BGSEE::ScriptEditor::ScriptSync]`
  `ScriptFileExtension=.obl`
  `AutoDeleteLogs=1`
  `ExistingFileHandlingOp=Keep`
  `AutoSyncInterval=3`
  `AutoSyncChanges=1`

*oblivim-sync-time*
Since CSE only provides a log file, we must sync up the processing of this
plugin with the updating of this log file. This is handled with
|g:ov_sync_time|. This number must be the sync value provided by the
ScriptSync update interval or `AutoSyncInterval` in "Construction Set
Extender.ini". This can be set to 

*oblivim-signs*
|signs| are a Vim/NeoVim feature that allow for basic script information to be
presented to the viewer. This plugin shows two types of sign, info and error.
These are the only two types of log information provided from ScriptSync, so
there are limitations on the information that can be provided through this
plugin. 

*oblivim-window*
|api-floatwin|/|popup.txt| are a NeoVim/Vim features respectively. This plugin
uses them to display the log information provided at any line that has a
|oblivim-signs|. The control of this is handled by |g:ov_ShowFloatLog|, and
styles are handled by |g:ov_window_style|.

------------------------------------------------------------------------------
Section 2b: Core Features                              *oblivim-core-features*

*oblivim-indent*
Indentation is supported with this plugin. While OBScript does not care about
indentation at all, it can be beneficial for visual reasons. This plugin
indents on any change in block level. `Begin`/`End` blocks are core blocks,
everything inside is indented by one. Script blocks like conditionals and
loops are also indented. Non-block type features like variable declaration and
scriptname are always at column 0. There are no options for this feature, if
you wish to disable it set  `indentexpr` to nothing for this filetype.

*oblivim-syntax*
Full syntax highlighting is featured, using just regex. Word types are
appropriately lined up to core Vim |hightlight-groups| to keep compatibility
with as many colorschemes as possible.

==============================================================================
Section 3: Options                                           *oblivim-options*

*g:ov_disable_cse*
Disables any ScriptSync features.
Accepted values: '`1`' or '`0`'
Defaults: '`0`'

*g:ov_sync_time*
Sync up to CSE ScriptSync. The two must match for ideal usage.
Accepted values: any positive integer
Default: '`3`'

*g:ov_error_sign*
Defines the sign characters for error signs.
Accepted values: Any one or two characters
Default: '`=>`'

*g:ov_info_sign*
Defines the sign characters for info signs.
Accepted values: Any one or two characters
Default: '`=>`'

*g:ov_window_style*
Set the |oblivim-window| to either single or double border windows.
NOTE: gVim users are currently forced to use '`double`'.
Accepted values: '`single`' or '`double`'
Defaults: '`single`'

*g:ov_ShowFloatLog*
Normal mode mapping that shows the |oblivim-window|.
Accepted values: Any free normal mode map
Default: `\l`

*g:ov_JumpNextError*
Normal mode mapping that jumps to the next error |oblivim-signs|.
Accepted values: Any free normal mode map
Default: `\en`

*g:ov_JumpPrevError*
Normal mode mapping that jumps to the previous error |oblivim-signs|.
Accepted values: Any free normal mode map
Default: `\ep`

*g:ov_JumpNextInfo*
Normal mode mapping that jumps to the next info |oblivim-signs|.
Accepted values: Any free normal mode map
Default: `\in`

*g:ov_JumpPrevInfo*
Normal mode mapping that jumps to the previous info |oblivim-signs|.
Accepted values: Any free normal mode map
Default: `\ip`

*g:ov_JumpNextAll*
Normal mode mapping that jumps to the next |oblivim-signs|.
Accepted values: Any free normal mode map
Default: `\n`

*g:ov_JumpPrevAll*
Normal mode mapping that jumps to the previous |oblivim-signs|.
Accepted values: Any free normal mode map
Default: `\p`

vim:tw=78:isk=!-~,^*,^\|,^\":ts=8:noet:ft=help:norl:
